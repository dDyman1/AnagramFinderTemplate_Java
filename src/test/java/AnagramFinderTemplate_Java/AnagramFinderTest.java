/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package AnagramFinderTemplate_Java;

import com.google.common.collect.Ordering;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class AnagramFinderTest {

    private final PrintStream standardOut = System.out;
    private final ByteArrayOutputStream outputStreamCapture = new ByteArrayOutputStream();

    @Test
    public void TestIO() {
        System.setOut(new PrintStream(outputStreamCapture));

        AnagramFinder.main(null);

        String expected = "[[dale, deal, lead], [evil, vile], [listen, silent], [monkeys write], [new york times], [talent]]";

        assertEquals(expected, outputStreamCapture.toString().trim());

    }

    @Test
    public void TestError(){
        String[] l1 = {"dale","vale", "veal", "", "lead"};
        String[] l2 = {"dale","vale", "veal", null, "lead"};

        Exception nullListE = assertThrows(Exception.class, () -> AnagramFinder.findAllAnagrams(null));
        assertEquals("Param 'wordList' is null or empty", nullListE.getMessage());
        Exception emptyValE = assertThrows(Exception.class, () -> AnagramFinder.findAllAnagrams(Arrays.asList(l1)));
        assertEquals("Param 'wordList' contains null or empty val", emptyValE.getMessage());
        Exception emptyListE = assertThrows(Exception.class, () -> AnagramFinder.findAllAnagrams(new ArrayList<>()));
        assertEquals("Param 'wordList' is null or empty", emptyListE.getMessage());
        Exception nullValE = assertThrows(Exception.class, () -> AnagramFinder.findAllAnagrams(Arrays.asList(l2)));
        assertEquals("Param 'wordList' contains null or empty val", nullValE.getMessage());

    }

    @Test
    public void TestIgnoreDuplicate(){
        String[] l = {"lead","silent","dale","talent","new york times","vile","talent","deal","listen", "monkeys write", "evil"};
        List<String> actual = AnagramFinder.removeDuplicate(Arrays.asList(l));
        String[] expected = {"lead","silent","dale","talent","new york times","vile","deal","listen", "monkeys write", "evil"};
        Arrays.sort(expected);
        Collections.sort(actual);
        assertEquals(Arrays.asList(expected), actual);
    }

    @Test
    public void TestReturns(){
        String[] l1 = {"fish"};
        assertEquals(1, AnagramFinder.findAllAnagrams(Arrays.asList(l1)).size());
        String[] l2 = {"fish", "lard"};
        assertEquals(2, AnagramFinder.findAllAnagrams(Arrays.asList(l2)).size());
        String[] l3 = {"sham", "mash"};
        assertEquals(1, AnagramFinder.findAllAnagrams(Arrays.asList(l3)).size());
        for (List<String> l:AnagramFinder.findAllAnagrams(Arrays.asList(l3))) {
            assertTrue(Ordering.natural().isOrdered(l));
        }
        String[] l4 = {"lead", "silent","dale","talent","new york times","vile","deal","listen", "monkeys write", "evil"};
        List<String> e  = new ArrayList<>();
        for (List<String> l:AnagramFinder.findAllAnagrams(Arrays.asList(l4))) {
            e.add(l.get(0));
            assertTrue(Ordering.natural().isOrdered(l));
        }
        assertTrue(Ordering.natural().isOrdered(e));
    }

}
